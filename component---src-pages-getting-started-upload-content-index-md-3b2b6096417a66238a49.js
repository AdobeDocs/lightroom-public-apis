(self.webpackChunklightroom_public_api=self.webpackChunklightroom_public_api||[]).push([[591],{28329:function(e,t,a){"use strict";a.r(t),a.d(t,{_frontmatter:function(){return l},default:function(){return m}});var n=a(22122),r=a(19756),o=(a(15007),a(64983)),i=a(99536),s=["components"],l={},d={_frontmatter:l},p=i.Z;function m(e){var t=e.components,i=(0,r.Z)(e,s);return(0,o.mdx)(p,(0,n.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"upload-customer-images-and-videos"},"Upload Customer Images and Videos"),(0,o.mdx)("p",null,"The upload workflow should be attempted only for users who already have a Lightroom account with an active subscription and an existing catalog with enough storage space to accommodate the incoming assets. A detailed list of precondition checks is provided later in this document. Use the base endpoint ",(0,o.mdx)("a",{parentName:"p",href:"https://lr.adobe.io"},"https://lr.adobe.io")," for all APIs."),(0,o.mdx)("h2",{id:"health-check"},"Health Check"),(0,o.mdx)("p",null,"At any time, the health of the Lightroom service may be queried with:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"GET /v2/health HTTP/1.1\n")),(0,o.mdx)("p",null,"Expected success response:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},'HTTP/1.1 200 OK\nContent-Type: application/json\nContent-Length: {xsd:nonNegativeInteger}\n{\n    "version": "<product_version>"\n}\n')),(0,o.mdx)("h2",{id:"check-customer-entitlement"},"Check Customer Entitlement"),(0,o.mdx)("p",null,"Applications should fetch the customer account information and inspect the ",(0,o.mdx)("inlineCode",{parentName:"p"},"entitlement.status")," field to determine the Creative Cloud entitlement of the customer. If this value is not either ",(0,o.mdx)("inlineCode",{parentName:"p"},"subscriber")," or ",(0,o.mdx)("inlineCode",{parentName:"p"},"trial"),", then any other calls to the Lightroom services will return a ",(0,o.mdx)("inlineCode",{parentName:"p"},"403 Forbidden")," error."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"GET /v2/account HTTP/1.1\nAuthorization: {auth_token}\nContent-Type: application/json\nContent-Length: {xsd:nonNegativeInteger}\n")),(0,o.mdx)("p",null,"Sample success response:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},'HTTP/1.1 200 OK\nContent-Type: application/json\nContent-Length: {xsd:nonNegativeInteger}\n{\n    "base": "<base_url>/",\n    "id": "<account_id>",\n    "type": "account",\n    "links": {\n        "self": {\n            "href": "/v2/accounts/<account_id>"\n        },\n        "/rels/apps": {\n            "href": "<account_apps_link>"\n        },\n        "/rels/avatars/small": {\n            "href": "/v2/avatars/<account_id>/<timestamp>/small",\n            "size": 50\n        },\n        "/rels/avatars/small2x": {\n            "href": "/v2/avatars/<account_id>/<timestamp>/small2x",\n            "size": 100\n        },\n        "/rels/avatars/medium": {\n            "href": "/v2/avatars/<account_id>/<timestamp>/medium",\n            "size": 115\n        },\n        "/rels/avatars/medium2x": {\n            "href": "/v2/avatars/<account_id>/<timestamp>/medium2x",\n            "size": 230\n        },\n        "/rels/avatars/large": {\n            "href": "/v2/avatars/<account_id>/<timestamp>/large",\n            "size": 138\n        },\n        "/rels/avatars/large2x": {\n            "href": "/v2/avatars/<account_id>/<timestamp>/large2x",\n            "size": 276\n        }\n    },\n    "email": "<email_address>",\n    "full_name": "<full_name>",\n    "first_name": "<first_name>",\n    "last_name": "<last_name>",\n    "avatar": {\n        "placeholder": {boolean}\n    },\n    "created": "<created_date>",\n    "updated": "<updated_date>",\n    "wcd_guid": "<wcd_guid>",\n    "country": "<country_id>",\n    "entitlement": {\n        "status": "<account_status>",\n        "trial": {\n            "start": "<trial_start_date>",\n            "end": "<trial_end_date>"\n        },\n        "current_subs": {\n            "product_id": "<subscription_product_id>",\n            "store": "<subscription_store>",\n            "purchase_date": "<subscription_purchase_date>",\n            "sao": {\n                "inpkg_LRMP": "1"\n            }\n        },\n        "storage": {\n            "used": <upload_usage_count>,\n            "limit": <storage_limit>,\n            "display_limit": <storage_display_limit>,\n            "warn": <storage_warn_limit>\n        },\n        "deletion_date": "<deletion_date>"\n    },\n    "payload": {\n        "lightroom": {\n            "<settings_key>": "<settings_value>"\n        }\n    },\n    "config": {\n        "<config_key>": "<config_value>"\n    }\n}\n')),(0,o.mdx)("h2",{id:"check-customer-catalog"},"Check Customer Catalog"),(0,o.mdx)("p",null,"If a Lightroom customer is entitled, an application should fetch the user catalog. "),(0,o.mdx)("p",null,"If a user has a catalog, the application should obtain the catalog identifier for use in the upload APIs. Otherwise, an application can inform users that they must first log into an Adobe Lightroom client before they are able to upload content from the partner application."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"GET /v2/catalog HTTP/1.1 \nAuthorization: {auth_token}\nContent-Type: application/json\nContent-Length: {xsd:nonNegativeInteger}\n")),(0,o.mdx)("p",null,"Sample success response:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},'HTTP/1.1 200 OK\nContent-Type: application/json\nContent-Length: {xsd:nonNegativeInteger}\n{\n    "base": "<base_url>",\n    "id": "<catalog_id>",\n    "type": "catalog",\n    "subtype": "<catalog_subtype>",\n    "created": "<created_date>",\n    "updated": "<updated_date>",\n    "links": {\n        "self": {\n            "href": "catalogs/<catalog_id>"\n        },\n        "/rels/collections": {\n            "href": "catalogs/<catalog_id>/albums?subtype=collection"\n        },\n        "/rels/images_videos": {\n            "href": "catalogs/<catalog_id>/assets?subtype=image%3Bvideo"\n        },\n        "/rels/deleted_images_videos": {\n            "href": "catalogs/<catalog_id>/assets?subtype=deleted_image%3Bdeleted_video&purge_date_after=0000-00-00T00:00:00"\n        },\n        "/rels/catalog_spaces": {\n            "href": "catalogs/<catalog_id>/spaces?subtype=shared"\n        },\n        "/rels/updates": {\n            "href": "catalogs/<catalog_id>/updates"\n        },\n        "/rels/tasks/index": {\n            "href": "<index_task_link>"\n        },\n        "/rels/tasks/tag": {\n            "href": "<tag_task_link>"\n        }\n    },\n    "payload": {\n        "name": "<catalog_name>",\n        "<key>": "<value>"\n    }\n}\n')),(0,o.mdx)("h2",{id:"upload-an-image-or-video-to-the-catalog"},"Upload an Image or Video to the Catalog"),(0,o.mdx)("p",null,"At this point, a client application should have a catalog identifier (",(0,o.mdx)("inlineCode",{parentName:"p"},"catalog_id"),"), which is required for the remainder of the workflow. "),(0,o.mdx)("p",null,(0,o.mdx)("em",{parentName:"p"},"STEP 1"),": Create an asset by providing newly generated globally unique identifiers (GUID) for ",(0,o.mdx)("inlineCode",{parentName:"p"},"asset_id"),". Refer to RFC-4122 for a description of GUIDs. The Lightroom services accept only GUIDs without hyphens. Most languages provide libraries to generate GUID (For examples refer ",(0,o.mdx)("a",{parentName:"p",href:"https://docs.oracle.com/javase/7/docs/api/java/util/UUID.html"},"https://docs.oracle.com/javase/7/docs/api/java/util/UUID.html")," and ",(0,o.mdx)("a",{parentName:"p",href:"https://docs.python.org/3/library/uuid.html"},"https://docs.python.org/3/library/uuid.html"),")"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},'PUT /v2/catalogs/{catalog_id}/assets/{asset_id} HTTP/1.1 \nAuthorization: {auth_token}\nContent-Type: application/json\nContent-Length: {xsd:nonNegativeInteger}\nIf-None-Match: {xsd:string}\n{\n    "subtype": "{asset_subtype}",\n    "payload": {\n        "captureDate": "0000-00-00T00:00:00",\n        "importSource": {\n            "fileName": "{file_name}",\n            "importedOnDevice": "{import_device_name}",\n            "importedBy": "{import_account_id}",\n            "importTimestamp": "{import_time}"\n        }\n    }\n}\n')),(0,o.mdx)("p",null,"Sample success response:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"HTTP/1.1 201 \nCreatedContent-Length: 0\nLocation: {xsd:anyURI}\n")),(0,o.mdx)("p",null,(0,o.mdx)("em",{parentName:"p"},"STEP 2"),": Upload the image or video file binary data. This API allows a maximum of 200MB to be uploaded per invocation. Larger files must be uploaded in chunks with this API by including ",(0,o.mdx)("inlineCode",{parentName:"p"},"Content-Range")," headers for each part. Clients may make multiple requests with ",(0,o.mdx)("inlineCode",{parentName:"p"},"Content-Range")," headers in parallel. For better fault tolerance, it may be preferable for clients to upload chunks smaller than 200MB."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"PUT /v2/catalogs/{catalog_id}/assets/{asset_id}/master HTTP/1.1\nAuthorization: {auth_token}\nContent-Length: {xsd:nonNegativeInteger}\nContent-Range: {xsd:string}\nContent-Type: {xsd:string}\n")),(0,o.mdx)("p",null,"Sample success response:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"HTTP/1.1 201 \nCreatedContent-Length: 0\nLocation: {xsd:anyURI}\n")),(0,o.mdx)("p",null,"NOTE: Refer to the API documentation for further information about above listed APIs."),(0,o.mdx)("h2",{id:"precondition-checks-before-upload"},"Precondition Checks Before Upload"),(0,o.mdx)("p",null,"Partner applications should check that an upload to a Lightroom customer catalog will succeed, and provide appropriate feedback to the user in cases where it will not. If a customer has logged in through Adobe IMS, the call to get the Lightroom account information will return a full response, barring network or service interruptions."),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"GET /v2/account\n")),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("p",{parentName:"li"},(0,o.mdx)("em",{parentName:"p"},"User is entitled to Lightroom"),": The account ",(0,o.mdx)("inlineCode",{parentName:"p"},"entitlement.status")," must be ",(0,o.mdx)("inlineCode",{parentName:"p"},"subscriber")," or ",(0,o.mdx)("inlineCode",{parentName:"p"},"trial"),". Other values indicate that a customer may be entitled to a different Adobe product; may have an expired subscription; or may never have subscribed to any product.")),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("p",{parentName:"li"},(0,o.mdx)("em",{parentName:"p"},"User has not exceeded their Lightroom storage"),". If the account ",(0,o.mdx)("inlineCode",{parentName:"p"},"entitlement.storage.used")," is greater than or equal to the ",(0,o.mdx)("inlineCode",{parentName:"p"},"entitlement.storage.limit")," then the customer has exceeded their storage quota.")),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("p",{parentName:"li"},(0,o.mdx)("em",{parentName:"p"},"User has sufficient space for the upload"),". Client applications should calculate the size of the images to be uploaded and determine they will fit in the available storage (",(0,o.mdx)("inlineCode",{parentName:"p"},"entitlement.storage.limit")," - ",(0,o.mdx)("inlineCode",{parentName:"p"},"entitlement.storage.used"),").")),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("p",{parentName:"li"},(0,o.mdx)("em",{parentName:"p"},"User has a Lightroom catalog"),": Entitled Lightroom customers may either have an existing lightroom catalog generated via Lightroom client applications or a new catalog will be generated when the partner application looks up the user's catalog using the below API:"),(0,o.mdx)("pre",{parentName:"li"},(0,o.mdx)("code",{parentName:"pre"},"GET /v2/catalog\n")),(0,o.mdx)("p",{parentName:"li"},"This call will fail with a ",(0,o.mdx)("inlineCode",{parentName:"p"},"403")," if the user has no catalog and a new catalog cannot be generated; otherwise it will return the catalog information."))),(0,o.mdx)("h2",{id:"general-error-conditions"},"General Error Conditions"),(0,o.mdx)("p",null,"The Lightroom APIs may return these errors that a shared among all of the entry points:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("p",{parentName:"li"},(0,o.mdx)("em",{parentName:"p"},"Invalid API Key"),": Calling an API results in an ",(0,o.mdx)("inlineCode",{parentName:"p"},"HTTP 403")," error of the form:"),(0,o.mdx)("pre",{parentName:"li"},(0,o.mdx)("code",{parentName:"pre"},'{\n    "error_code": "403003",\n    "message": "Api Key is invalid"\n}\n')),(0,o.mdx)("p",{parentName:"li"},"The partner application should include their API key in the ",(0,o.mdx)("inlineCode",{parentName:"p"},"X-API-Key")," header")),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("p",{parentName:"li"},(0,o.mdx)("em",{parentName:"p"},"Access token expired"),": Calling an API results in an ",(0,o.mdx)("inlineCode",{parentName:"p"},"HTTP 403")," error of the form:"),(0,o.mdx)("pre",{parentName:"li"},(0,o.mdx)("code",{parentName:"pre"},'{\n    "error_code": "4300",\n    "message": "Access is forbidden"\n}\n')),(0,o.mdx)("p",{parentName:"li"},"The partner application should obtain a new access token from Adobe IMS before trying to call any other APIs.")),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("p",{parentName:"li"},(0,o.mdx)("em",{parentName:"p"},"No access token"),": Calling an API results in an ",(0,o.mdx)("inlineCode",{parentName:"p"},"HTTP 401 Unauthorized")," error. The partner application should ensure that an access token is include in the Authorization header.")),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("p",{parentName:"li"},(0,o.mdx)("em",{parentName:"p"},"Service error"),": Calling an API results in an ",(0,o.mdx)("inlineCode",{parentName:"p"},"HTTP 5XX")," error. The partner application should retry the request with an exponential timing backoff to give the service time to be restored."))),(0,o.mdx)("h2",{id:"error-conditions-applicable-for-specific-apis"},"Error conditions applicable for specific APIs"),(0,o.mdx)("p",null,"The Lightroom APIs may return these errors that are specific to the upload APIs:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("p",{parentName:"li"},(0,o.mdx)("em",{parentName:"p"},"Insufficient storage"),": Attempting to ",(0,o.mdx)("inlineCode",{parentName:"p"},"PUT")," an original file for an asset results in an ",(0,o.mdx)("inlineCode",{parentName:"p"},"HTTP 413")," error of the form:"),(0,o.mdx)("pre",{parentName:"li"},(0,o.mdx)("code",{parentName:"pre"},'{\n    "error_code": "1007",\n    "message": "The resource is too big"\n}\n')),(0,o.mdx)("p",{parentName:"li"},"A partner application should notify the user that their storage is full and make no further upload requests.")),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("p",{parentName:"li"},(0,o.mdx)("em",{parentName:"p"},"Content type mismatch"),": Attempting to ",(0,o.mdx)("inlineCode",{parentName:"p"},"PUT")," an original file for an asset results in an ",(0,o.mdx)("inlineCode",{parentName:"p"},"HTTP 415")," error of the form:"),(0,o.mdx)("pre",{parentName:"li"},(0,o.mdx)("code",{parentName:"pre"},'{\n    "error_code": "1007",\n    "message": "Invalid content type"\n}\n')),(0,o.mdx)("p",{parentName:"li"},"Partner applications should check that the content type matches the upload data type and try again.")),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("p",{parentName:"li"},(0,o.mdx)("em",{parentName:"p"},"JSON Validation failed"),": Attempting to create a new asset results in an ",(0,o.mdx)("inlineCode",{parentName:"p"},"HTTP 400")," error of the form:"),(0,o.mdx)("pre",{parentName:"li"},(0,o.mdx)("code",{parentName:"pre"},'{\n    "error_code": "1005",\n    "message": "Input validation error"\n}\n')),(0,o.mdx)("p",{parentName:"li"},"This means the JSON content provided in the body is not legal JSON, has fields that are not supported, or has illegal properties for supported fields. Partner applications should fix the JSON content and retry.")),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("p",{parentName:"li"},(0,o.mdx)("em",{parentName:"p"},"Duplicate detected"),": Attempting to create a new asset results in an ",(0,o.mdx)("inlineCode",{parentName:"p"},"HTTP 412")," precondition failed error. This indicates that the provided SHA-256 matches an existing asset in the catalog. Partner applications should skip the upload of the asset.")),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("p",{parentName:"li"},(0,o.mdx)("em",{parentName:"p"},"Catalog_id change"),': In general it is recommended that the catalog_id once obtained by calling the "Retrieve the user catalog metadata" API call, is cached and used for all successive calls for the user. However sometimes due to user\'s activities on certain Lightroom clients, the catalog_id of the user may change. In this case when an API call is made to "create asset", it will return a 404 (not found) response indicating that the catalog id is not found. In this case, call the "Retrieve the user catalog metadata" API again and get the latest catalog_id for the user and cache it for use in successive API calls. Below is a sample 404 response that may indicate a change of catalog id.'),(0,o.mdx)("pre",{parentName:"li"},(0,o.mdx)("code",{parentName:"pre"},'{\n    "code":1000,\n    "description":"Resource not found",\n    "subtype":"ResourceNotFoundError",\n    "errors":{"catalog":["does not exist"]}\n}\n')))),(0,o.mdx)("h2",{id:"upload-workflow-diagrams"},"Upload workflow diagrams"),(0,o.mdx)("p",null,(0,o.mdx)("img",{alt:"User logged in from partner application to Lightroom",src:a(67340)}),"\n",(0,o.mdx)("img",{alt:"Auto-upload of images or video from partner app to Lightroom",src:a(54697)}),"\n",(0,o.mdx)("img",{alt:"Bulk-upload of selected images or video from partner app to Lightroom",src:a(64917)})))}m.isMDXComponent=!0},54697:function(e,t,a){"use strict";a.r(t),t.default=a.p+"static/AutoUploadFromPartnerAppToLR-faf344fcf10ae453583d108c57b9cd30.png"},64917:function(e,t,a){"use strict";a.r(t),t.default=a.p+"static/BulkUploadOfSelectedAssetsFromPartnerAppToLR-d038b0c2b3a8713c34b1f4db6cfbdc00.png"},67340:function(e,t,a){"use strict";a.r(t),t.default=a.p+"static/UserLoggedInFromPartnerAppToLR-4ac30eeb7474a42a0c5b2d6ff7597497.png"}}]);
//# sourceMappingURL=component---src-pages-getting-started-upload-content-index-md-3b2b6096417a66238a49.js.map